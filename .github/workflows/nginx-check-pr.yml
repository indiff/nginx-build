name: check-pr

on:
  push:
    path: |
      - 'nginx-check-pr.yml'
  #workflow_call:
  workflow_dispatch: # 手动执行时候可以配置的参数
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: true
        required: false
      buildOnly:
        description: 'Only build nginx'
        type: boolean
        default: false
        required: false
      openssl3Ver:
        description: 'Select Openssl Version'
        type: choice
        default: "3.4.0"
        required: false
        options: 
        - 3.0.15
        - 3.4.0
  schedule:
    #- cron: '07 10 * * *' # 每天凌晨2点（UTC），对应每天上午10点（CST）, 这里对应的是中国时区的是 18 点
    - cron: '3 1 * * *' # UTC 时间 1:00 对应中国时间 9:00
jobs:
  build-in-ubuntu:
    #if: ${{ ( github.repository_owner == 'nginx' || github.repository_owner == 'nginxinc' ) }}
    runs-on: [ ubuntu-latest ]
    steps:
      - name: checkout v4
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: master
          repository: nginx/nginx
          fetch-depth: 1
          
      # - name: Check out nginx tests
      #   uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      #   with:
      #     repository: nginx/nginx-tests
      #     path: nginx-tests

      - name: Install build and test dependencies
        run: |
          # Free disk space
          df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
          sudo apt-get update
          sudo apt-get install \
            libedit-dev \
            libgd-dev \
            libgeoip-dev \
            libpcre2-dev \
            libperl-dev \
            libssl-dev \
            libxml2-dev \
            libxslt1-dev \
            zlib1g-dev \
            ffmpeg \
            libcache-memcached-perl \
            libcryptx-perl \
            libgd-perl \
            libio-socket-ssl-perl \
            libtest-harness-perl \
            libprotocol-websocket-perl \
            libscgi-perl \
            uwsgi \
            uwsgi-plugin-python3

      - name: Configure and build
        id: configure_build
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          export version=$(grep -oP '#define NGINX_VERSION\s+"\K[\d.]+' src/core/nginx.h | head -1)
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          echo "BUILD_VERSION_TIMESTAMP=${version}_${build_timestamp}" >> $GITHUB_OUTPUT
          mkdir -p t
          export DEB_BUILD_MAINT_OPTIONS="hardening=+all"
          #export DEB_CFLAGS_MAINT_APPEND="-Wp,-D_FORTIFY_SOURCE=2 -fPIC"
          export DEB_CFLAGS_MAINT_APPEND="-Wp,-fPIC"
          DEB_CFLAGS_MAINT_APPEND=-fPIC
          export DEB_LDFLAGS_MAINT_APPEND=""-Wl,--as-needed""
          # --with-ipv6
          auto/configure \
            --prefix=/tmp \
            --with-http_ssl_module \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-cpp_test_module \
            --with-http_perl_module \
            --with-http_xslt_module \
            --with-http_image_filter_module \
            --with-http_degradation_module \
            --with-http_v3_module \
            --with-http_geoip_module \
            --with-stream_geoip_module \
            --with-cc-opt="$(dpkg-buildflags --get CFLAGS)" \
            --with-ld-opt="$(dpkg-buildflags --get LDFLAGS)" \
          || cat objs/autoconf.err
          cp -R conf objs/conf
          cp -R contrib objs/contrib
          cp -R docs/html objs/html
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' objs/html/index.html
          sed -i 's/nginx/qw0p/Ig' objs/html/50x.html
          mkdir objs/logs
          mkdir objs/temp
          mkdir objs/temp/client_body_temp
          mkdir objs/temp/proxy_temp
          mkdir objs/temp/fastcgi_temp
          echo "" >> objs/logs/access.log
          echo "" >> objs/logs/error.log
          echo "" >> objs/temp/dummy
          # define NGINX_VERSION      "1.27.4"
          # define NGINX_VER          "nginx/" NGINX_VERSION
          make -j$(nproc) -k || make
          
          tree -all . >> objs/my_log.txt
          cat src/http/ngx_http_special_response.c | grep NGINX_VER >> objs/my_log.txt
          cat src/http/ngx_http_header_filter_module.c | grep "Server:" >> objs/my_log.txt
          cat src/http/ngx_http_header_filter_module.c | grep "NGINX_VER" >> objs/my_log.txt
          cat src/http/ngx_http_special_response.c | grep "NGINX_VER" >> objs/my_log.txt
          cat src/http/ngx_http_special_response.c | grep "NGINX_VER_BUILD" >> objs/my_log.txt
          cat src/http/ngx_http_special_response.c | grep "nginx" >> objs/my_log.txt

      # - name: Test
      #   working-directory: nginx-tests
      #   run: |
      #     prove -v -j$(nproc) --state=save ../t . || prove -v --state=failed
      #   env:
      #     TEST_NGINX_BINARY: "${{ github.workspace }}/objs/nginx"
      #     TEST_NGINX_VERBOSE: 1
      #     PERL5LIB: "${{ github.workspace }}/nginx-tests/lib"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-ubuntu-${{ steps.configure_build.outputs.BUILD_VERSION_TIMESTAMP }}
          overwrite: true
          path: |
            objs/*
            !objs/src/**/*
            !objs/**/Makefile
            !objs/**/*.8
            !objs/**/*.err
            !objs/**/*.c
            !objs/**/*.h
            !objs/**/*.o
            !objs/**/*.obj
            !objs/**/*.pdb
            !objs/**/*.lib
            !objs/**/*.exp
  
  build-in-centos:
    runs-on: ubuntu-latest

    steps:
      - name: Create build script
        run: |
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -e
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          yum clean all
          yum makecache
          yum install -y epel-release
          yum install -y tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd
          # git clone --depth 1 -b openssl-3.4 https://github.com/openssl/openssl /ssl
          # cd /ssl
          # ./config --release no-shared enable-ec_nistp_64_gcc_128
          # make -sj$(nproc)
               
          git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
          cd /nginx-build
          CC_OPT="-I /ssl/include \$(rpm --eval '%{optflags}') \$(pcre-config --cflags) -fPIC"
          LD_OPT="-Wl,-z,relro -Wl,-z,now -L ssl"
          ./auto/configure \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-cpp_test_module \
            --with-http_perl_module \
            --with-http_xslt_module \
            --with-http_image_filter_module \
            --with-http_degradation_module \
            --with-http_geoip_module \
            --with-stream_geoip_module \
          --prefix=/usr/local/nginx --with-http_ssl_module --with-cc-opt="\$CC_OPT" --with-ld-opt="\$LD_OPT"
          
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="\$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"\$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' objs/html/index.html
          sed -i 's/nginx/qw0p/Ig' objs/html/50x.html
          make
          make install
          cd /usr/local/nginx
          tar -czvf /workspace/nginx.tar.gz .
          EOF
          chmod +x build.sh

      - name: Build Nginx in Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace centos:7 /bin/bash -c "/workspace/build.sh"

      - name: Upload Nginx package
        uses: actions/upload-artifact@v4
        with:
          name: nginx-package
          path: nginx.tar.gz


  build-in-windows:
    name: ${{ matrix.os }}, ${{ matrix.toolchain }}, ${{ matrix.env }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2025 ]
        include:
          - toolchain: msvc
            env: x64
    defaults:
      run:
        # shell: C:\Tools\msys64\msys2_shell.cmd -defterm -no-start -where . -full-path -shell bash.exe -Eeo pipefail -x '{0}'
        shell: C:\msys64\msys2_shell.cmd -defterm -no-start -where . -full-path -shell bash.exe -Eeo pipefail -x '{0}'
    env:
      # https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.44/pcre2-10.44.tar.gz
      #pcre2_ver: 10.39
      pcre2_ver: 10.44
      zlib_ver: 1.3.1
      #openssl3_ver: 3.0.15
      openssl3_ver: 3.4.0
      openssl_ver: 1.1.1w
    steps:
      - name: Check out nginx sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: master
          repository: nginx/nginx
          fetch-depth: 1
      - name: Check out nginx tests
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: nginx/nginx-tests
          path: nginx-tests

      - name: Load Version and Set timezone
        id: version_timestamp
        if: matrix.toolchain == 'msvc'
        shell: pwsh
        run: |
           Set-TimeZone -Id "China Standard Time"
           tzutil /s "China Standard Time"
           taskkill /f /im explorer.exe
           start explorer.exe
           sleep 5
           echo "Restart Explorer for TimeZone"
           $mem = Get-WmiObject Win32_OperatingSystem
           echo "Time:$(Get-Date)"
           echo "Mem:$([math]::round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2))%"
           echo "CPU:$(Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty LoadPercentage)%"
           #define NGINX_VERSION      "1.27.4"
           $version=$((Select-String -Pattern 'NGINX_VERSION\s+\"([\d\.]+)\"' -Path "src/core/nginx.h").Matches.Groups[1].Value)
           echo "Version:$($version)"
           Write-Output "BUILD_VERSION=$($version)" >> $env:GITHUB_ENV
           Write-Output "BUILD_VERSION_TIMESTAMP=$($version).$(Get-Date -Format "yyyyMMddHHmmss")" >> $env:GITHUB_ENV

            
      - name: Set MSYSTEM
        run: | # env
          # Write-host "${{ matrix.toolchain }}" ## Write-host: command not found
          # Write-host "${{ matrix.env }}"
          # echo MSYSTEM=C:\msys64 >> $GITHUB_ENV
          # C:\msys64\usr\bin\bash -lc 'pacman -S mingw-w64-x86_64-pango mingw-w64-x86_64-sed --noconfirm'
          # Set-TimeZone -Id "China Standard Time"
          # $mem = Get-WmiObject Win32_OperatingSystem
          # echo "Time:$(Get-Date)"
          # echo "Mem:$([math]::round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2))%"
          # echo "CPU:$(Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty LoadPercentage)%"
          
          echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
          # 安装 tree 命令，显示当前目录以及子目录的树状机构
          pacman -S tree mingw-w64-x86_64-sed --noconfirm
          #echo "C:\msys64\usr\bin" >> $env:GITHUB_OUTPUT
          #echo "C:\msys64\mingw64\bin" >> $env:GITHUB_OUTPUT

          #echo "C:\msys64\usr\bin" >> $env:GITHUB_PATH
          #echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH

          #bash -lc "pacman --noconfirm -Syuu"
          #bash -lc 'pacman -S mingw-w64-x86_64-pango mingw-w64-x86_64-sed --noconfirm'
          
          #echo "Tools version:"
          #echo (((gcc --version) | select-object -first 1) + " " + (gcc -dumpmachine))
          #echo (mingw32-make --version) | select-object -first 1
          #echo (sh --version) | select-object -first 1

          
        # https://nginx.org/en/docs/howto_build_on_win32.html
      - name: Set the defaults and set up environment
        run: |
          ENV_JSON=$(cat <<EOF
          {
          "NGINX_CONFIGURE_CMD_WIN": "auto/configure \
                    --builddir=objs \
                    --prefix= \
                    --conf-path=conf/nginx.conf \
                    --pid-path=logs/nginx.pid \
                    --http-log-path=logs/access.log \
                    --error-log-path=logs/error.log \
                    --sbin-path=nginx.exe \
                    --http-client-body-temp-path=temp/client_body_temp \
                    --http-proxy-temp-path=temp/proxy_temp \
                    --http-fastcgi-temp-path=temp/fastcgi_temp \
                    --with-cc-opt=-DFD_SETSIZE=1024 \
                    --with-pcre=objs/lib/pcre \
                    --with-zlib=objs/lib/zlib \
                    --with-select_module \
                    --with-http_realip_module \
                    --with-http_addition_module \
                    --with-http_sub_module \
                    --with-http_dav_module \
                    --with-http_stub_status_module \
                    --with-http_flv_module \
                    --with-http_mp4_module \
                    --with-http_gunzip_module \
                    --with-http_gzip_static_module \
                    --with-http_random_index_module \
                    --with-http_secure_link_module \
                    --with-http_ssl_module \
                    --with-mail_ssl_module \
                    --with-http_auth_request_module \
                    --with-http_v2_module \
                    --with-http_slice_module \
                    --with-stream_ssl_module \
                    --with-stream_ssl_preread_module \
                    --with-stream_realip_module \
                    --without-http_autoindex_module \
                    --with-openssl=objs/lib/openssl",
          "NGINX_CONFIGURE_CC_MSVC": "--with-cc=cl",
          "NGINX_CONFIGURE_CC_MINGW": "--with-cc=/${{ matrix.toolchain }}/bin/${{ matrix.env }}-w64-mingw32-gcc.exe",
          "NGINX_CONFIGURE_ADD_STATIC": "--with-stream --with-mail",
          "NGINX_CONFIGURE_ADD_DYNAMIC": "--with-stream=dynamic --with-mail=dynamic",
          "NGINX_CONFIGURE_OPENSSL_OPT": "no-asm no-tests -D_WIN32_WINNT=0x0601"
          }
          EOF
          )

          NGINX_CONFIGURE_CMD_WIN=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CMD_WIN')
          NGINX_CONFIGURE_CC_MSVC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MSVC')
          NGINX_CONFIGURE_CC_MINGW=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MINGW')
          NGINX_CONFIGURE_ADD_STATIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_STATIC')
          NGINX_CONFIGURE_ADD_DYNAMIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_DYNAMIC')
          NGINX_CONFIGURE_OPENSSL_OPT=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_OPENSSL_OPT')

          echo NGINX_CONFIGURE_CMD_WIN="$NGINX_CONFIGURE_CMD_WIN" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MSVC="$NGINX_CONFIGURE_CC_MSVC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MINGW="$NGINX_CONFIGURE_CC_MINGW" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_STATIC="$NGINX_CONFIGURE_ADD_STATIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_DYNAMIC="$NGINX_CONFIGURE_ADD_DYNAMIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_OPENSSL_OPT="$NGINX_CONFIGURE_OPENSSL_OPT" >> $GITHUB_ENV

          echo "VCVARSALL=$('C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          echo "VCARCH=${{ matrix.env }}" >> $GITHUB_ENV
          echo "CL=/MP" >> $GITHUB_ENV

          echo 'TEMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMPDIR=C:\TEMP' >> $GITHUB_ENV

          rm -rf C:/TEMP/
          rm -rf C:/tmp/

          mkdir C:/TEMP/
          mkdir C:/tmp/
          mkdir -p t/

      - name: Download and unpack dependencies
        run: | #     nginx/src/os/win32/nginx.rc
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          echo "openssl3 version: $openssl3_ver"
          mkdir objs
          mkdir objs/lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${{ env.pcre2_ver }}/pcre2-${{ env.pcre2_ver }}.tar.gz
          tar -C objs/lib --transform 's/pcre2-${{ env.pcre2_ver }}/pcre/' -xzf ./pcre2-${{ env.pcre2_ver }}.tar.gz
          echo '#include <stdint.h>' > objs/lib/pcre/src/inttypes.h
          curl -sLO https://zlib.net/fossils/zlib-${{ env.zlib_ver }}.tar.gz
          tar -C objs/lib --transform 's/zlib-${{ env.zlib_ver }}/zlib/' -xzf ./zlib-${{ env.zlib_ver }}.tar.gz
          case "${{ matrix.toolchain }}" in
            msvc)
              curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
              tar -C objs/lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
            ;;
            mingw*)
              curl -sLO https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-${{ env.openssl_ver }}.tar.gz
              tar -C objs/lib --transform 's/openssl-${{ env.openssl_ver }}/openssl/' -xzf ./openssl-${{ env.openssl_ver }}.tar.gz
            ;;
          esac
          cp -R objs objs.deps
          curl -sLO https://github.com/indiff/nginx-build/raw/refs/heads/main/nginx.rc
          cp -f nginx.rc src/os/win32/nginx.rc
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          # define NGINX_VERSION      "1.27.4"
          # define NGINX_VER          "nginx/" NGINX_VERSION
          cp -R conf objs/conf
          cp -R contrib objs/contrib
          cp -R docs/html objs/html
          sed -i 's/nginx/qw0p/Ig' objs/html/index.html
          sed -i 's/nginx/qw0p/Ig' objs/html/50x.html
          curl -sLO https://github.com/indiff/nginx-build/raw/refs/heads/main/nssm.exe
          cp -f nssm.exe objs/nssm.exe
          mkdir objs/logs
          mkdir objs/temp
          mkdir objs/temp/client_body_temp
          mkdir objs/temp/proxy_temp
          mkdir objs/temp/fastcgi_temp
          echo "" >> objs/logs/access.log
          echo "" >> objs/logs/error.log
          echo "" >> objs/temp/dummy
          

      - name: Configure and build msvc
        id: configure_build
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          @echo on
          call "%VCVARSALL%" %VCARCH%
          bash.exe ^
            %NGINX_CONFIGURE_CMD_WIN% ^
            %NGINX_CONFIGURE_CC_MSVC% ^
            %NGINX_CONFIGURE_ADD_STATIC% ^
            --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%"
          nmake -f objs/Makefile
 
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-msvc-${{ env.BUILD_VERSION_TIMESTAMP }}
          overwrite: true
          compression-level: 9
          path: |
            objs/*
            objs/logs/
            objs/temp/
            !objs/lib/**/*
            !objs/src/**/*
            !objs/**/Makefile
            !objs/**/*.8
            !objs/**/*.err
            !objs/**/*.c
            !objs/**/*.h
            !objs/**/*.o
            !objs/**/*.obj
            !objs/**/*.pdb
            !objs/**/*.lib
            !objs/**/*.exp
            !objs/**/*.ilk 
            !objs/**/*.res 
            !objs/**/*.pch 
    