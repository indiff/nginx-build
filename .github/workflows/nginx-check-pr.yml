name: check-pr

on:
  push:
  #workflow_call:
  workflow_dispatch: # 手动执行时候可以配置的参数
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: true
        required: false
      buildPrefix:
        description: 'Nginx build prefix'
        type: string
        default: "/opt/nginx"
        required: false
      buildOnly:
        description: 'Only build nginx'
        type: boolean
        default: false
        required: false
      pcre2_ver:
        description: 'Select pcre2 Version'
        type: choice
        default: "10.45"
        required: false
        options: 
        - 10.45
        - 10.44
      zlib_ver:
        description: 'Select pcre2 Version'
        type: choice
        default: "1.3.1"
        required: false
        options: 
        - 1.3.1
      openssl3Ver:
        description: 'Select Openssl Version'
        type: choice
        default: "3.4.1"
        required: false
        options: 
        - 3.4.1
        - 3.4.0
        - 3.0.15
  schedule:
    #- cron: '07 10 * * *' # 每天凌晨2点（UTC），对应每天上午10点（CST）, 这里对应的是中国时区的是 18 点
    - cron: '3 10 * * *' # UTC 时间 1:00 对应中国时间 9:00
env:
  # https://github.com/openssl/openssl
  openssl3_ver: 3.4.1
  # https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.44/pcre2-10.44.tar.gz
  pcre2_ver: 10.45
  # https://zlib.net/ https://github.com/madler/zlib
  zlib_ver: 1.3.1
  openssl_ver: 1.1.1w
jobs:
  before_build:
    runs-on: [ ubuntu-latest ]
    outputs:
      NGINX_VERSION: ${{ steps.get.outputs.NGINX_VERSION }}
      NGINX_BUILD_PREFIX: ${{ steps.get.outputs.NGINX_BUILD_PREFIX }}
    # https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs#%E7%A4%BA%E4%BE%8B%E5%AE%9A%E4%B9%89%E4%BD%9C%E4%B8%9A%E7%9A%84%E8%BE%93%E5%87%BA  
    steps:
      - name: Get buildPrefix
        id: get
        run: |
          curl -sLO https://github.com/nginx/nginx/raw/refs/heads/master/src/core/nginx.h
          export version=$(grep -oP '#define NGINX_VERSION\s+"\K[\d.]+' nginx.h | head -1)
          echo "NGINX_VERSION=${version}" >> "$GITHUB_OUTPUT"
          export build_prefix="${{ github.event.inputs.buildPrefix }}"
          if [ "${{ github.event.inputs.buildPrefix }}" == "" ]; then build_prefix="/opt/nginx"; fi
          echo "NGINX_BUILD_PREFIX=${build_prefix}" >> "$GITHUB_OUTPUT"
          
          
  build-in-ubuntu:
    #if: ${{ ( github.repository_owner == 'nginx' || github.repository_owner == 'nginxinc' ) }}
    runs-on: [ ubuntu-latest ]
    needs: before_build
    steps:
      - name: checkout v4
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: master
          repository: nginx/nginx
          fetch-depth: 1
          
      # - name: Check out nginx tests
      #   uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      #   with:
      #     repository: nginx/nginx-tests
      #     path: nginx-tests

      - name: Install build and test dependencies
        run: |
          # Free disk space
          df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
          sudo apt purge firefox firefox-locale-*  # 删除主程序和语言包
          sudo apt autoremove  # 移除不再需要的依赖
          sudo apt-get update
          sudo apt-get upgrade
          gcc --version
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          # sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          sudo apt upgrade
          # 示例安装GCC 14
          sudo apt install gcc-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          gcc --version
          sudo apt-get install \
            libedit-dev \
            libgd-dev \
            libgeoip-dev \
            libpcre2-dev \
            libperl-dev \
            libssl-dev \
            libxml2-dev \
            libxslt1-dev \
            zlib1g-dev \
            ffmpeg \
            libcache-memcached-perl \
            libcryptx-perl \
            libgd-perl \
            libio-socket-ssl-perl \
            libtest-harness-perl \
            libprotocol-websocket-perl \
            libscgi-perl \
            uwsgi \
            zip \
            unzip \
            uwsgi-plugin-python3

      - name: Configure and build
        id: configure_build
        run: |
          set -xe
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/{conf,html,temp,logs}
          sudo chown -R 777 ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          export DEB_BUILD_MAINT_OPTIONS="hardening=+all"
          #export DEB_CFLAGS_MAINT_APPEND="-Wp,-D_FORTIFY_SOURCE=2 -fPIC"
          export DEB_CFLAGS_MAINT_APPEND="-fPIC -O3 -flto -march=native"
          # DEB_CFLAGS_MAINT_APPEND=-fPIC
          export DEB_LDFLAGS_MAINT_APPEND=""-Wl,--as-needed""
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          mkdir -p lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${pcre2_ver}/pcre2-${pcre2_ver}.tar.gz
          tar -C lib --transform "s/pcre2-${pcre2_ver}/pcre2/" -xzf ./pcre2-${pcre2_ver}.tar.gz
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
          tar -C lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
          curl -sLO https://zlib.net/fossils/zlib-${zlib_ver}.tar.gz
          tar -C lib --transform "s/zlib-${zlib_ver}/zlib/" -xzf ./zlib-${zlib_ver}.tar.gz
          # tar -xvf openssl-${openssl3_ver}.tar.gz
          du -sh lib/openssl
          du -sh lib/pcre2
          du -sh lib/zlib
          # --with-ipv6
          auto/configure \
            --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --sbin-path=nginx \
            --with-http_ssl_module \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-http_perl_module \
            --with-http_xslt_module \
            --with-http_image_filter_module \
            --with-http_degradation_module \
            --with-http_v3_module \
            --without-http-cache \
            --with-http_geoip_module \
            --with-stream_geoip_module \
            --with-openssl=lib/openssl \
            --with-pcre=lib/pcre2 \
            --with-zlib=lib/zlib \
            --with-cc-opt="$(dpkg-buildflags --get CFLAGS)" \
            --with-ld-opt="$(dpkg-buildflags --get LDFLAGS)" \
          || cat objs/autoconf.err
          cp -R conf objs/conf
          cp -R contrib objs/contrib
          cp -R docs/html objs/html
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' objs/html/index.html
          sed -i 's/nginx/qw0p/Ig' objs/html/50x.html
          mkdir -p objs/logs
          mkdir -p objs/temp
          mkdir -p objs/client_body_temp
          mkdir -p objs/proxy_temp
          mkdir -p objs/fastcgi_temp
          mkdir -p objs/uwsgi_temp
          mkdir -p objs/scgi_temp
          echo "" >> objs/logs/access.log
          echo "" >> objs/logs/error.log
          echo "" >> objs/temp/$RANDOM_STRING
          # define NGINX_VERSION      "1.27.4"
          # define NGINX_VER          "nginx/" NGINX_VERSION
          make -j$(nproc) -k || make
          
          # make install
          # tree -all . >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_special_response.c | grep NGINX_VER >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_header_filter_module.c | grep "Server:" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_header_filter_module.c | grep "NGINX_VER" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_special_response.c | grep "NGINX_VER" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_special_response.c | grep "NGINX_VER_BUILD" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          #cat src/http/ngx_http_special_response.c | grep "nginx" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/my_log.txt
          
          rm -rf lib
          rm -rf objs/lib
          rm -rf objs/src
          rm -rf objs/contrib
          rm -f Makefile
          rm -f  *.8
          rm -f  *.err
          rm -f  *.c
          rm -f  *.h
          rm -f  *.o
          rm -f  *.obj
          rm -f  *.pdb
          rm -f  *.lib
          rm -f  *.exp
          rm -f  *.ilk
          rm -f  *.res
          rm -f  *.pch
          ./objs/nginx -V
          sudo cp -ar objs/* ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          # sudo echo "sudo apt-get update" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "sudo apt-get update" | sudo tee -a ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh > /dev/null
          echo "sudo apt-get install libedit-dev libgd-dev libgeoip-dev libpcre2-dev libperl-dev libssl-dev libxml2-dev libxslt1-dev zlib1g-dev ffmpeg libcache-memcached-perl libcryptx-perl libgd-perl libio-socket-ssl-perl libtest-harness-perl libprotocol-websocket-perl libscgi-perl uwsgi zip unzip uwsgi-plugin-python3" | sudo tee -a ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh > /dev/null
          sudo chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          zip -r -q -9 /opt/opt_ubuntu_nginx.zip .
          
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glibc_version="$(cut -d' ' -f2 <<<$(getconf GNU_LIBC_VERSION))"
          export size_kb="$(du -k /opt/opt_ubuntu_nginx.zip | cut -f1)"
          echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_${build_timestamp}_glibc${glibc_version}_${size_kb}KB" >> $GITHUB_OUTPUT
          # zip -r /opt/opt_ubuntu_nginx_${{ steps.configure_build.outputs.BUILD_VERSION_TIMESTAMP }}.zip objs/

      # - name: Test
      #   working-directory: nginx-tests
      #   run: |
      #     prove -v -j$(nproc) --state=save ../t . || prove -v --state=failed
      #   env:
      #     TEST_NGINX_BINARY: "${{ github.workspace }}/objs/nginx"
      #     TEST_NGINX_VERBOSE: 1
      #     PERL5LIB: "${{ github.workspace }}/nginx-tests/lib"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-ubuntu-${{ steps.configure_build.outputs.BUILD_VERSION_TIMESTAMP }}
          overwrite: true
          #path: /opt/*.zip
          path: |
            ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/src/**/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/Makefile
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.8
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.err
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.c
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.h
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.o
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.obj
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.pdb
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.lib
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.exp
          # path: |
          #   objs/*
          #   !objs/src/**/*
          #   !objs/**/Makefile
          #   !objs/**/*.8
          #   !objs/**/*.err
          #   !objs/**/*.c
          #   !objs/**/*.h
          #   !objs/**/*.o
          #   !objs/**/*.obj
          #   !objs/**/*.pdb
          #   !objs/**/*.lib
          #   !objs/**/*.exp

  build-in-centos6:
    runs-on: ubuntu-latest
    needs: before_build

    steps:
      - name: Checkout v4
        uses: actions/checkout@v4

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          #curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo
          curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo
          # https://vault.centos.org/6.10/os/x86_64/Packages/
          # curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-6.repo
          yum clean all
          yum makecache
          yum install -y epel-release
          yum install -y tzdata sudo
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd
          # 安装 devtoolset-6
          #sudo yum -y install centos-release-scl
          #sudo yum -y install devtoolset-6

          # 临时启用 GCC 6.3.1
          #scl enable devtoolset-6 bash

          # 验证版本
          gcc --version  # 输出 gcc 6.3.1
          # timedatectl set-timezone Asia/Shanghai
          # git clone --depth 1 -b openssl-3.4 https://github.com/openssl/openssl /ssl
          # cd /ssl
          # ./config --release no-shared enable-ec_nistp_64_gcc_128
          # make -sj$(nproc)
          git clone --depth 1 https://github.com/vozlt/nginx-module-vts.git /nginx-module-vts
          git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          #echo "openssl3 version: $openssl3_ver"
          
          cd /nginx-build
          mkdir -p objs/lib
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
          # tar -C objs/lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
          tar -xvf openssl-${openssl3_ver}.tar.gz
          du -sh ./openssl-${openssl3_ver}/
          CC_OPT="$(rpm --eval '%{optflags}') $(pcre-config --cflags) -fPIC"
          LD_OPT="-Wl,-z,relro -Wl,-z,now"
          # --with-http_geoip_module \ --with-stream_geoip_module \ No package GeoIP-devel available.
          # --builddir=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} \
          ./auto/configure \
            --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} \
            --sbin-path=nginx \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-http_degradation_module \
            --without-http-cache \
            --add-module=/nginx-module-vts \
            --with-openssl=./openssl-${openssl3_ver} \
          --with-http_ssl_module --with-cc-opt="$CC_OPT" --with-ld-opt="$LD_OPT"
          
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' docs/html/index.html
          sed -i 's/nginx/qw0p/Ig' docs/html/50x.html
          
          make -j$(nproc)
          sudo make install
          # zip -r /workspace/opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          echo "yum update -y" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          # GeoIP GeoIP-devel 
          echo "yum install -y pcre-devel zlib-devel openssl openssl-devel wget sed perl-IPC-Cmd zip systemd" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh 
          chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          # mkdir ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/access.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/error.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/temp/$RANDOM_STRING
          # tar cvf /workspace/opt_nginx.tar ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/
          zip -r -q -9 /workspace/opt_nginx.zip .
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh

      - name: Build Nginx in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/{conf,html,temp,logs}
          sudo chown -R 777 ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}:${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} -w /workspace centos:centos6.10 /bin/bash -c "/workspace/build.sh"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k opt_nginx.zip | cut -f1)
          echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_${build_timestamp}_glibc${glib_version}_${size_kb}KB" >> $GITHUB_ENV
          tree ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}

      - name: Upload Nginx package
        uses: actions/upload-artifact@v4
        with:
          name: nginx-centos6-${{ env.BUILD_VERSION_TIMESTAMP }}
          # path: ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}*.tar
          path: |
            ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/src/**/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/Makefile
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.8
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.err
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.c
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.h
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.o
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.obj
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.pdb
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.lib
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.exp 
 
  build-in-centos7:
    runs-on: ubuntu-latest
    needs: before_build

    steps:
      - name: Checkout v4
        uses: actions/checkout@v4

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo
          yum clean all
          yum makecache
          yum install -y epel-release
          # yum install -y centos-release-scl
          ls -lh /etc/yum.repos.d/
          # cat /etc/yum.repos.d/CentOS-SCLo-scl.repo
          curl -sLO https://github.com/indiff/nginx-build/raw/refs/heads/main/CentOS-SCLo-scl.repo
          cp -f CentOS-SCLo-scl.repo /etc/yum.repos.d/CentOS-SCLo-scl.repo
          cat /etc/yum.repos.d/CentOS-SCLo-scl.repo
          yum -y update
          yum -y install devtoolset-11 --nogpgcheck
          scl enable devtoolset-11 bash
          source /opt/rh/devtoolset-11/enable
          gcc -v
          yum -y install tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd
          yum install -y  perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper

          # timedatectl set-timezone Asia/Shanghai
          # git clone --depth 1 -b openssl-3.4 https://github.com/openssl/openssl /ssl
          # cd /ssl
          # ./config --release no-shared enable-ec_nistp_64_gcc_128
          # make -sj$(nproc)
          git clone --depth 1 https://github.com/vozlt/nginx-module-vts.git /nginx-module-vts
          git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
          cd /nginx-build
          
          mkdir -p lib
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
          tar -C lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${pcre2_ver}/pcre2-${pcre2_ver}.tar.gz
          tar -C lib --transform "s/pcre2-${pcre2_ver}/pcre2/" -xzf ./pcre2-${pcre2_ver}.tar.gz
          curl -sLO https://zlib.net/fossils/zlib-${zlib_ver}.tar.gz
          tar -C lib --transform "s/zlib-${zlib_ver}/zlib/" -xzf ./zlib-${zlib_ver}.tar.gz
          du -sh lib/openssl
          du -sh lib/pcre2
          du -sh lib/zlib
          
          CC_OPT="$(rpm --eval '%{optflags}') $(pcre-config --cflags) -fPIC"
          LD_OPT="-Wl,-z,relro -Wl,-z,now"
          ./auto/configure \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --sbin-path=nginx \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-http_degradation_module \
            --with-http_geoip_module \
            --without-http-cache \
            --with-stream_geoip_module \
            --add-module=/nginx-module-vts \
            --with-openssl=lib/openssl \
            --with-pcre=lib/pcre2 \
            --with-zlib=lib/zlib \
          --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} --with-http_ssl_module --with-cc-opt="$CC_OPT" --with-ld-opt="$LD_OPT"
          
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' docs/html/index.html
          sed -i 's/nginx/qw0p/Ig' docs/html/50x.html
          
          make -j$(nproc)
          make install
          # zip -r /workspace/opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          echo "yum update -y" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "yum install -y pcre-devel zlib-devel openssl openssl-devel wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh 
          chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/access.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/error.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/temp/qw0p
          # tar cvf /workspace/opt_nginx.tar ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/
          zip -r -q -9 /workspace/opt_nginx.zip .
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
          
      # - name: Upload build.sh
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build.sh
      #     path: build.sh     

      - name: Build Nginx in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/{conf,html,temp,logs}
          sudo chown -R 777 ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}:${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} -w /workspace centos:7 /bin/bash -c "/workspace/build.sh"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k opt_nginx.zip | cut -f1)
          echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_${build_timestamp}_glibc${glib_version}_${size_kb}KB" >> $GITHUB_ENV
          tree ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          # cp -f opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}-centos7-${version}_${build_timestamp}_${size_kb}KB.zip
          # mv opt_nginx.tar ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}-centos7-${version}_${build_timestamp}_${size_kb}KB.tar

      - name: Upload Nginx package
        uses: actions/upload-artifact@v4
        with:
          name: nginx-centos7-${{ env.BUILD_VERSION_TIMESTAMP }}
          # path: ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}*.tar
          path: |
            ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/src/**/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/Makefile
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.8
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.err
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.c
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.h
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.o
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.obj
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.pdb
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.lib
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.exp

#       - name: Update Latest
#        run: |
#          set -xe
#          shopt -s nullglob
#          NAME="Latest_Auto_Build_Nginx_CentOS7_(${{ env.BUILD_VERSION_TIMESTAMP }})"
#          TAGNAME="latest_${{ env.BUILD_VERSION_TIMESTAMP }}"
#          gh release create "$TAGNAME" --target "main" --title "$NAME" opt_nginx.zip
#        env:
#          GITHUB_TOKEN: ${{ github.token }} 

  build-in-rocky8:
    runs-on: ubuntu-latest
    needs: before_build

    steps:
      - name: Checkout v4
        uses: actions/checkout@v4
  
      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          # curl -o /etc/yum.repos.d/Rocky-Base.repo https://mirrors.aliyun.com/repo/Rocky-8.repo
          dnf clean all
          dnf makecache
          dnf install -y epel-release
          dnf install -y tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          dnf update -y
          dnf install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd sudo
          gcc --version
          sudo dnf install -y gcc-toolset-14-gcc gcc-toolset-14-gcc-c++
          scl enable gcc-toolset-14 bash
          source /opt/rh/gcc-toolset-14/enable
          gcc --version
          git clone --depth 1 https://github.com/vozlt/nginx-module-vts.git /nginx-module-vts
          git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
          cd /nginx-build
          mkdir -p lib
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
          tar -C lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${pcre2_ver}/pcre2-${pcre2_ver}.tar.gz
          tar -C lib --transform "s/pcre2-${pcre2_ver}/pcre2/" -xzf ./pcre2-${pcre2_ver}.tar.gz
          curl -sLO https://zlib.net/fossils/zlib-${zlib_ver}.tar.gz
          tar -C lib --transform "s/zlib-${zlib_ver}/zlib/" -xzf ./zlib-${zlib_ver}.tar.gz
          du -sh lib/openssl
          du -sh lib/pcre2
          du -sh lib/zlib
          CC_OPT="$(rpm --eval '%{optflags}') $(pcre-config --cflags) -fPIC"
          LD_OPT="-Wl,-z,relro -Wl,-z,now"
          ./auto/configure \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --sbin-path=nginx \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-http_degradation_module \
            --with-http_geoip_module \
            --without-http-cache \
            --with-stream_geoip_module \
            --add-module=/nginx-module-vts \
            --with-openssl=lib/openssl \
            --with-pcre=lib/pcre2 \
            --with-zlib=lib/zlib \
          --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} --with-http_ssl_module --with-cc-opt="$CC_OPT" --with-ld-opt="$LD_OPT"
          
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' docs/html/index.html
          sed -i 's/nginx/qw0p/Ig' docs/html/50x.html

          
          make -j$(nproc)
          make install

          echo "dnf update -y" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "dnf install -y pcre-devel zlib-devel openssl openssl-devel wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh 
          chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/access.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/error.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/temp/qw0p
          # tar cvf /workspace/opt_nginx.tar ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/
          zip -r -q -9 /workspace/opt_nginx.zip .
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
          
  
      - name: Build Nginx in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/{conf,html,temp,logs}
          sudo chown -R 777 ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}:${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} -w /workspace rockylinux:8 /bin/bash -c "/workspace/build.sh"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          # unzip opt_nginx.zip -d ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          # tree .
          # cp -f opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}-rocky8-${version}_${build_timestamp}_${size_kb}KB.zip
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k opt_nginx.zip | cut -f1)
          echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_${build_timestamp}_glibc${glib_version}_${size_kb}KB" >> $GITHUB_ENV
          tree ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
  
      - name: Upload Nginx package
        uses: actions/upload-artifact@v4
        with:
          name: nginx-rocky8-${{ env.BUILD_VERSION_TIMESTAMP }}
          # path: /opt/*.zip
          path: |
            ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/src/**/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/Makefile
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.8
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.err
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.c
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.h
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.o
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.obj
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.pdb
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.lib
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.exp

  build-in-rocky9:
    runs-on: ubuntu-latest
    needs: before_build

    steps:
      - name: Checkout v4
        uses: actions/checkout@v4
  
      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          # curl -o /etc/yum.repos.d/Rocky-Base.repo https://mirrors.aliyun.com/repo/Rocky-8.repo
          # sed -e 's|^mirrorlist=|#mirrorlist=|g' \
          #   -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \
          #   -i.bak \
          #   /etc/yum.repos.d/Rocky-*.repo
          # dnf install -y https://repo.huaweicloud.com/epel/epel-release-latest-9.noarch.rpm
          dnf install -y --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          dnf install -y --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-9.noarch.rpm
          dnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm -y
          dnf install -y --nogpgcheck https://dl.rockylinux.org/pub/rocky/9/CRB/x86_64/os/Packages/l/libmaxminddb-devel-1.5.2-4.el9.x86_64.rpm
          dnf clean all
          dnf makecache
          dnf update -y
          dnf install -y epel-release
          dnf install -y tzdata sudo
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          dnf install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed  zip systemd
          sudo dnf install -y  perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy
          gcc --version
          sudo dnf install -y gcc-toolset-14-gcc gcc-toolset-14-gcc-c++ perl-FindBin
          scl enable gcc-toolset-14 bash
          source /opt/rh/gcc-toolset-14/enable
          gcc --version
          perl -v
          # dnf install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd zip systemd libmaxminddb libmaxminddb-devel mmdb-bin
          # wget https://github.com/maxmind/geoip-api-c/releases/download/v1.6.12/GeoIP-1.6.12.tar.gz
          # tar -zxvf GeoIP-1.6.12.tar.gz
          # cd GeoIP-1.6.12
          # ./configure
          # make
          # make install
          # echo '/usr/local/lib' >> /etc/ld.so.conf.d/geoip.conf
          # ldconfig
          # git clone --depth 1 https://github.com/maxmind/libmaxminddb.git /libmaxminddb
          # cd /libmaxminddb
          # ./configure
          # make
          # make check
          # make install
          # sh -c "echo /usr/local/lib  >> /etc/ld.so.conf.d/local.conf"
          # ldconfig
          git clone --depth 1 https://github.com/vozlt/nginx-module-vts.git /nginx-module-vts
          git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /ngx_http_geoip2_module
          git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
          cd /nginx-build
          mkdir -p objs/lib
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          mkdir -p objs/lib
          curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
          tar -C objs/lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          mkdir -p objs/lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${pcre2_ver}/pcre2-${pcre2_ver}.tar.gz
          tar -C objs/lib --transform "s/pcre2-${pcre2_ver}/pcre2/" -xzf ./pcre2-${pcre2_ver}.tar.gz
          curl -sLO https://zlib.net/fossils/zlib-${zlib_ver}.tar.gz
          tar -C objs/lib --transform "s/zlib-${zlib_ver}/zlib/" -xzf ./zlib-${zlib_ver}.tar.gz
          du -sh objs/lib/openssl
          du -sh objs/lib/pcre2
          du -sh objs/lib/zlib
          
          # tar -xvf openssl-${openssl3_ver}.tar.gz
          du -sh objs/lib/openssl
          CC_OPT="$(rpm --eval '%{optflags}') $(pcre-config --cflags) -fPIC"
          # LD_OPT="-L/usr/local/lib,-Wl,-z,relro -Wl,-z,now"
          # LD_OPT="-pthread -Wall -Wextra -O2"
          LD_OPT="-Wl,-z,relro -Wl,-z,now"
          ./auto/configure \
            --conf-path=conf/nginx.conf \
            --pid-path=logs/nginx.pid \
            --http-log-path=logs/access.log \
            --error-log-path=logs/error.log \
            --sbin-path=nginx \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-http_gzip_static_module \
            --with-http_random_index_module \
            --with-http_secure_link_module \
            --with-http_stub_status_module \
            --with-mail \
            --with-mail_ssl_module \
            --with-select_module \
            --with-poll_module \
            --with-http_auth_request_module \
            --with-http_v2_module \
            --with-http_slice_module \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-stream_realip_module \
            --with-file-aio \
            --with-threads \
            --with-compat \
            --with-http_degradation_module \
            --without-http-cache \
            --add-module=/ngx_http_geoip2_module \
            --add-module=/nginx-module-vts \
            --with-openssl=objs/lib/openssl \
            --with-pcre=objs/lib/pcre2 \
            --with-zlib=objs/lib/zlib \
          --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} --with-http_ssl_module --with-cc-opt="$CC_OPT" --with-ld-opt="$LD_OPT"
          
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          sed -i 's/nginx/qw0p/Ig' docs/html/index.html
          sed -i 's/nginx/qw0p/Ig' docs/html/50x.html
          make -j$(nproc)
          make install
          echo "dnf update -y" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "dnf install -y pcre-devel zlib-devel openssl openssl-devel wget sed perl-IPC-Cmd zip systemd libmaxminddb-devel" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh 
          chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/access.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/logs/error.log
          echo "" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/temp/qw0p
          # tar cvf /workspace/opt_nginx.tar ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/
          zip -r -q -9 /workspace/opt_nginx.zip .
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
          
  
      - name: Build Nginx in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/{conf,html,temp,logs}
          sudo chown -R 777 ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}:${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} -w /workspace rockylinux:9 /bin/bash -c "/workspace/build.sh"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export size_kb=$(du -k opt_nginx.zip | cut -f1)
          export glib_version="$(cat glibc_version.txt)"
          echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_${build_timestamp}_glibc${glib_version}_${size_kb}KB" >> $GITHUB_ENV
          tree ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          # unzip opt_nginx.zip -d ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
          # tree .
          # cp -f opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}-rocky9-${version}_${build_timestamp}_${size_kb}KB.zip
  
      - name: Upload Nginx package
        uses: actions/upload-artifact@v4
        with:
          name: nginx-rocky9-${{ env.BUILD_VERSION_TIMESTAMP }}
          # path: /opt/*.zip
          path: |
            ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/src/**/*
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/Makefile
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.8
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.err
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.c
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.h
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.o
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.obj
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.pdb
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.lib
            !${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/**/*.exp
  # add build in rockylinux 10 by docker            
  # build-in-rocky10: 
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout v4
  #       uses: actions/checkout@v4
  
  #     - name: Create build script
  #       run: |
  #         set -xe
  #         cat << 'EOF' > build.sh
  #         #!/bin/bash
  #         set -xe
  #         echo 'LANG=zh_CN.UTF-8' >> /etc/environment
  #         echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
  #         echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
  #         echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
  #         # curl -o /etc/yum.repos.d/Rocky-Base.repo https://mirrors.aliyun.com/repo/Rocky-8.repo
  #         # sed -e 's|^mirrorlist=|#mirrorlist=|g' \
  #         #   -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \
  #         #   -i.bak \
  #         #   /etc/yum.repos.d/Rocky-*.repo
  #         # dnf install -y https://repo.huaweicloud.com/epel/epel-release-latest-9.noarch.rpm
  #         dnf install -y --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm
  #         dnf install -y --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-next-release-latest-10.noarch.rpm
  #         dnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm -y
  #         dnf install -y --nogpgcheck https://dl.rockylinux.org/pub/rocky/9.5/CRB/x86_64/os/Packages/l/libmaxminddb-devel-1.5.2-4.el9.x86_64.rpm
  #         dnf clean all
  #         dnf makecache
  #         dnf install -y epel-release
  #         dnf install -y tzdata
  #         ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
  #         echo 'Asia/Shanghai' > /etc/timezone
  #         dnf update -y
  #         dnf install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd zip systemd
  #         # dnf install -y gcc pcre-devel zlib-devel make openssl openssl-devel git wget sed perl-IPC-Cmd zip systemd libmaxminddb libmaxminddb-devel mmdb-bin
  #         # wget https://github.com/maxmind/geoip-api-c/releases/download/v1.6.12/GeoIP-1.6.12.tar.gz
  #         # tar -zxvf GeoIP-1.6.12.tar.gz
  #         # cd GeoIP-1.6.12
  #         # ./configure
  #         # make
  #         # make install
  #         # echo '/usr/local/lib' >> /etc/ld.so.conf.d/geoip.conf
  #         # ldconfig
  #         # git clone --depth 1 https://github.com/maxmind/libmaxminddb.git /libmaxminddb
  #         # cd /libmaxminddb
  #         # ./configure
  #         # make
  #         # make check
  #         # make install
  #         # sh -c "echo /usr/local/lib  >> /etc/ld.so.conf.d/local.conf"
  #         # ldconfig
  #         git clone --depth 1 https://github.com/leev/ngx_http_geoip2_module.git /ngx_http_geoip2_module
  #         git clone --depth 1 https://github.com/nginx/nginx.git /nginx-build
  #         cd /nginx-build
  #         CC_OPT="$(rpm --eval '%{optflags}') $(pcre-config --cflags) -fPIC"
  #         LD_OPT="-L/usr/local/lib,-Wl,-z,relro -Wl,-z,now"
  #         ./auto/configure \
  #           --with-http_realip_module \
  #           --with-http_addition_module \
  #           --with-http_sub_module \
  #           --with-http_dav_module \
  #           --with-http_flv_module \
  #           --with-http_mp4_module \
  #           --with-http_gunzip_module \
  #           --with-http_gzip_static_module \
  #           --with-http_random_index_module \
  #           --with-http_secure_link_module \
  #           --with-http_stub_status_module \
  #           --with-mail \
  #           --with-mail_ssl_module \
  #           --with-select_module \
  #           --with-poll_module \
  #           --with-http_auth_request_module \
  #           --with-http_v2_module \
  #           --with-http_slice_module \
  #           --with-stream \
  #           --with-stream_ssl_module \
  #           --with-stream_ssl_preread_module \
  #           --with-stream_realip_module \
  #           --with-file-aio \
  #           --with-threads \
  #           --with-compat \
  #           --with-http_degradation_module \
  #           --add-module=/ngx_http_geoip2_module \
  #         --prefix=${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }} --with-http_ssl_module --with-cc-opt="$CC_OPT" --with-ld-opt="$LD_OPT"
          
  #         sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
  #         export RANDOM_STRING="$(openssl rand -hex 2)"
  #         sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
  #         sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
  #         sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
  #         sed -i 's/nginx/qw0p/Ig' docs/html/index.html
  #         sed -i 's/nginx/qw0p/Ig' docs/html/50x.html
  #         make -j$(nproc)
  #         make install
  #         echo "dnf update -y" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
  #         echo "dnf install -y pcre-devel zlib-devel openssl openssl-devel wget sed perl-IPC-Cmd zip systemd libmaxminddb-devel" >> ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh 
  #         chmod +x ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/00install.sh
  #         # zip -r /workspace/opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
  #         cd ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}/
  #         zip -r -q -9 /workspace/opt_nginx.zip .
  #         EOF
  #         chmod +x build.sh
          
  
  #     - name: Build Nginx in Docker
  #       run: |
  #         sudo timedatectl set-timezone Asia/Shanghai
  #         timedatectl status
  #         docker run --cpus="$(nproc --all)" --rm -v ${{ github.workspace }}:/workspace -w /workspace rockylinux:10 /bin/bash -c "/workspace/build.sh"
  #         curl -sLO https://github.com/nginx/nginx/raw/refs/heads/master/src/core/nginx.h
  #         export version=$(grep -oP '#define NGINX_VERSION\s+"\K[\d.]+' nginx.h | head -1)
  #         export build_timestamp="$(date +'%Y%m%d_%H%M')"
  #         export size_kb=$(du -k opt_nginx.zip | cut -f1)
  #         echo "BUILD_VERSION_TIMESTAMP=${version}_${build_timestamp}_${size_kb}KB" >> $GITHUB_ENV
  #         # unzip opt_nginx.zip -d ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}
  #         # tree .
  #         cp -f opt_nginx.zip ${{ needs.before_build.outputs.NGINX_BUILD_PREFIX }}-rocky10-${version}_${build_timestamp}_${size_kb}KB.zip
  
  #     - name: Upload Nginx package
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: nginx-rocky10-${{ env.BUILD_VERSION_TIMESTAMP }}
  #         path: /opt/*.zip
          
  build-in-windows:
    name: ${{ matrix.os }}, ${{ matrix.toolchain }}, ${{ matrix.env }}
    #if: false
    runs-on: ${{ matrix.os }}
    needs: before_build
    strategy:
      matrix:
        os: [ windows-2025 ]
        include:
          - toolchain: msvc
            env: x64
    defaults:
      run:
        # shell: C:\Tools\msys64\msys2_shell.cmd -defterm -no-start -where . -full-path -shell bash.exe -Eeo pipefail -x '{0}'
        shell: C:\msys64\msys2_shell.cmd -defterm -no-start -where . -full-path -shell bash.exe -Eeo pipefail -x '{0}'
    #env:
      # https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.44/pcre2-10.44.tar.gz
      #pcre2_ver: 10.39 # https://github.com/PCRE2Project/pcre2/
      #pcre2_ver: 10.45
      # https://zlib.net/fossils # https://zlib.net/
      #zlib_ver: 1.3.1
      #openssl3_ver: 3.0.15 # 
      # https://github.com/openssl/openssl
      #openssl3_ver: 3.4.1
      #openssl_ver: 1.1.1w
    steps:
      - name: Check out nginx sources
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: master
          repository: nginx/nginx
          fetch-depth: 1
      - name: Check out nginx tests
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: nginx/nginx-tests
          path: nginx-tests

      - name: Load Version and Set timezone
        id: version_timestamp
        if: matrix.toolchain == 'msvc'
        shell: pwsh
        run: |
           Set-TimeZone -Id "China Standard Time"
           tzutil /s "China Standard Time"
           taskkill /f /im explorer.exe
           start explorer.exe
           sleep 5
           echo "Restart Explorer for TimeZone"
           $mem = Get-WmiObject Win32_OperatingSystem
           echo "Time:$(Get-Date)"
           echo "Mem:$([math]::round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2))%"
           echo "CPU:$(Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty LoadPercentage)%"
           #define NGINX_VERSION      "1.27.4"
           # $version=$((Select-String -Pattern 'NGINX_VERSION\s+\"([\d\.]+)\"' -Path "src/core/nginx.h").Matches.Groups[1].Value)
           # echo "Version:$($version)"
           # Write-Output "BUILD_VERSION=$($version)" >> $env:GITHUB_ENV
           Write-Output "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.NGINX_VERSION }}_$(Get-Date -Format "yyyyMMdd_HHmm")" >> $env:GITHUB_ENV

            
      - name: Set MSYSTEM
        run: | # env
          # Write-host "${{ matrix.toolchain }}" ## Write-host: command not found
          # Write-host "${{ matrix.env }}"
          # echo MSYSTEM=C:\msys64 >> $GITHUB_ENV
          # C:\msys64\usr\bin\bash -lc 'pacman -S mingw-w64-x86_64-pango mingw-w64-x86_64-sed --noconfirm'
          # Set-TimeZone -Id "China Standard Time"
          # $mem = Get-WmiObject Win32_OperatingSystem
          # echo "Time:$(Get-Date)"
          # echo "Mem:$([math]::round((($mem.TotalVisibleMemorySize - $mem.FreePhysicalMemory) / $mem.TotalVisibleMemorySize) * 100, 2))%"
          # echo "CPU:$(Get-WmiObject -Class Win32_Processor | Select-Object -ExpandProperty LoadPercentage)%"
          
          echo "MSYSTEM=MINGW64" >> $GITHUB_ENV
          # 安装 tree 命令，显示当前目录以及子目录的树状机构
          pacman -S tree mingw-w64-x86_64-sed --noconfirm
          #echo "C:\msys64\usr\bin" >> $env:GITHUB_OUTPUT
          #echo "C:\msys64\mingw64\bin" >> $env:GITHUB_OUTPUT

          #echo "C:\msys64\usr\bin" >> $env:GITHUB_PATH
          #echo "C:\msys64\mingw64\bin" >> $env:GITHUB_PATH

          #bash -lc "pacman --noconfirm -Syuu"
          #bash -lc 'pacman -S mingw-w64-x86_64-pango mingw-w64-x86_64-sed --noconfirm'
          
          #echo "Tools version:"
          #echo (((gcc --version) | select-object -first 1) + " " + (gcc -dumpmachine))
          #echo (mingw32-make --version) | select-object -first 1
          #echo (sh --version) | select-object -first 1

          
        # https://nginx.org/en/docs/howto_build_on_win32.html
        #                     --without-http_autoindex_module \
      - name: Set the defaults and set up environment
        run: |
          ENV_JSON=$(cat <<EOF
          {
          "NGINX_CONFIGURE_CMD_WIN": "auto/configure \
                    --builddir=objs \
                    --prefix= \
                    --conf-path=conf/nginx.conf \
                    --pid-path=logs/nginx.pid \
                    --http-log-path=logs/access.log \
                    --error-log-path=logs/error.log \
                    --sbin-path=nginx.exe \
                    --http-client-body-temp-path=temp/client_body_temp \
                    --http-proxy-temp-path=temp/proxy_temp \
                    --http-fastcgi-temp-path=temp/fastcgi_temp \
                    --with-cc-opt=-DFD_SETSIZE=1024 \
                    --with-pcre=objs/lib/pcre \
                    --with-zlib=objs/lib/zlib \
                    --with-select_module \
                    --with-http_realip_module \
                    --with-http_addition_module \
                    --with-http_sub_module \
                    --with-http_dav_module \
                    --with-http_stub_status_module \
                    --with-http_flv_module \
                    --with-http_mp4_module \
                    --with-http_gunzip_module \
                    --with-http_gzip_static_module \
                    --with-http_random_index_module \
                    --with-http_secure_link_module \
                    --with-http_ssl_module \
                    --with-mail_ssl_module \
                    --with-http_auth_request_module \
                    --with-http_v2_module \
                    --with-http_slice_module \
                    --with-stream_ssl_module \
                    --with-stream_ssl_preread_module \
                    --with-stream_realip_module \
                    --without-http-cache \
                    --add-module=c:/nginx-module-vts \
                    --with-openssl=objs/lib/openssl",
          "NGINX_CONFIGURE_CC_MSVC": "--with-cc=cl",
          "NGINX_CONFIGURE_CC_MINGW": "--with-cc=/${{ matrix.toolchain }}/bin/${{ matrix.env }}-w64-mingw32-gcc.exe",
          "NGINX_CONFIGURE_ADD_STATIC": "--with-stream --with-mail",
          "NGINX_CONFIGURE_ADD_DYNAMIC": "--with-stream=dynamic --with-mail=dynamic",
          "NGINX_CONFIGURE_OPENSSL_OPT": "no-asm no-tests -D_WIN32_WINNT=0x0601"
          }
          EOF
          )

          NGINX_CONFIGURE_CMD_WIN=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CMD_WIN')
          NGINX_CONFIGURE_CC_MSVC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MSVC')
          NGINX_CONFIGURE_CC_MINGW=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_CC_MINGW')
          NGINX_CONFIGURE_ADD_STATIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_STATIC')
          NGINX_CONFIGURE_ADD_DYNAMIC=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_ADD_DYNAMIC')
          NGINX_CONFIGURE_OPENSSL_OPT=$(echo $ENV_JSON | jq -r '.NGINX_CONFIGURE_OPENSSL_OPT')

          echo NGINX_CONFIGURE_CMD_WIN="$NGINX_CONFIGURE_CMD_WIN" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MSVC="$NGINX_CONFIGURE_CC_MSVC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_CC_MINGW="$NGINX_CONFIGURE_CC_MINGW" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_STATIC="$NGINX_CONFIGURE_ADD_STATIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_ADD_DYNAMIC="$NGINX_CONFIGURE_ADD_DYNAMIC" >> $GITHUB_ENV
          echo NGINX_CONFIGURE_OPENSSL_OPT="$NGINX_CONFIGURE_OPENSSL_OPT" >> $GITHUB_ENV

          echo "VCVARSALL=$('C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe' -products \* -latest -property installationPath)\\VC\\Auxiliary\\Build\\vcvarsall.bat" >> $GITHUB_ENV
          echo "VCARCH=${{ matrix.env }}" >> $GITHUB_ENV
          echo "CL=/MP" >> $GITHUB_ENV

          echo 'TEMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMP=C:\TEMP' >> $GITHUB_ENV
          echo 'TMPDIR=C:\TEMP' >> $GITHUB_ENV

          rm -rf C:/TEMP/
          rm -rf C:/tmp/

          mkdir C:/TEMP/
          mkdir C:/tmp/
          mkdir -p t/

      - name: Download and unpack dependencies
        run: | #     nginx/src/os/win32/nginx.rc
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          echo "openssl3 version: $openssl3_ver"
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          mkdir -p objs/lib
          curl -sLO https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${pcre2_ver}/pcre2-${pcre2_ver}.tar.gz
          tar -C objs/lib --transform "s/pcre2-${pcre2_ver}/pcre/" -xzf ./pcre2-${pcre2_ver}.tar.gz
          # mkdir -p objs/lib/pcre/src
          # tree objs/lib/pcre
          echo '#include <stdint.h>' > objs/lib/pcre/src/inttypes.h
          curl -sLO https://zlib.net/fossils/zlib-${zlib_ver}.tar.gz
          tar -C objs/lib --transform "s/zlib-${zlib_ver}/zlib/" -xzf ./zlib-${zlib_ver}.tar.gz
          case "${{ matrix.toolchain }}" in
            msvc)
              curl -sLO https://github.com/openssl/openssl/releases/download/openssl-${openssl3_ver}/openssl-${openssl3_ver}.tar.gz
              tar -C objs/lib --transform "s/openssl-${openssl3_ver}/openssl/" -xzf ./openssl-${openssl3_ver}.tar.gz
            ;;
            mingw*)
              curl -sLO https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1w/openssl-${{ env.openssl_ver }}.tar.gz
              tar -C objs/lib --transform 's/openssl-${{ env.openssl_ver }}/openssl/' -xzf ./openssl-${{ env.openssl_ver }}.tar.gz
            ;;
          esac
          cp -R objs objs.deps
          curl -sLO https://github.com/indiff/nginx-build/raw/refs/heads/main/nginx.rc
          cp -f nginx.rc src/os/win32/nginx.rc
          sed -i 's/#define NGINX_VER[[:space:]]*"nginx\/" NGINX_VERSION/#define NGINX_VER          "qw0p\/" NGINX_VERSION/' src/core/nginx.h
          export RANDOM_STRING="$(openssl rand -hex 2)"
          sed -i "s/#define NGINX_VERSION[[:space:]]*\".*\"/#define NGINX_VERSION          \"$RANDOM_STRING\"/" src/core/nginx.h
          sed -i 's/Server: nginx/Server: qw0p/Ig' src/http/ngx_http_header_filter_module.c
          sed -i 's/<center>nginx<\/center>/<center>qw0p<\/center>/Ig' src/http/ngx_http_special_response.c
          # define NGINX_VERSION      "1.27.4"
          # define NGINX_VER          "nginx/" NGINX_VERSION
          cp -R conf objs/conf
          # cp -R contrib objs/contrib
          cp -R docs/html objs/html
          sed -i 's/nginx/qw0p/Ig' objs/html/index.html
          sed -i 's/nginx/qw0p/Ig' objs/html/50x.html
          curl -sLO https://github.com/indiff/nginx-build/raw/refs/heads/main/nssm.exe
          cp -f nssm.exe objs/nssm.exe
          mkdir objs/logs
          mkdir objs/temp
          mkdir objs/temp/client_body_temp
          mkdir objs/temp/proxy_temp
          mkdir objs/temp/fastcgi_temp
          echo "" >> objs/logs/access.log
          echo "" >> objs/logs/error.log
          echo "" >> objs/temp/dummy
          git clone --depth 1 -b dev_sync_windows https://github.com/indiff/nginx-module-vts.git c:/nginx-module-vts
          

        # rmdir /s /q objs/lib/openssl
        # rmdir /s /q objs/lib/pcre
        # rmdir /s /q objs/lib/zlib
        # rmdir /s /q objs/lib
        # rmdir /s /q objs/src
        # del /f /s /q Makefile
        # del /f /s /q *.8
        # del /f /s /q *.err
        # del /f /s /q *.c
        # del /f /s /q *.h
        # del /f /s /q *.o
        # del /f /s /q *.obj
        # del /f /s /q *.pdb
        # del /f /s /q *.lib
        # del /f /s /q *.exp
        # del /f /s /q *.ilk
        # del /f /s /q *.res
        # del /f /s /q *.pch
        # cd objs
        # 7z a -tzip -mx=9 "Nginx.MSVC.x64.Release.zip" . -r
        # powershell -Command "(Get-Item 'Nginx.MSVC.x64.Release.zip').Length / 1KB | ForEach-Object { Write-Output('SIZE_KB=' + [Math]::Round($_, 2) + 'KB') } " >> $env:GITHUB_ENV
        # del /f /q Nginx.MSVC.x64.Release.zip      
      - name: Configure and build msvc
        id: configure_build
        if: matrix.toolchain == 'msvc'
        shell: cmd
        run: |
          @echo on
          call "%VCVARSALL%" %VCARCH%
          bash.exe ^
            %NGINX_CONFIGURE_CMD_WIN% ^
            %NGINX_CONFIGURE_CC_MSVC% ^
            %NGINX_CONFIGURE_ADD_STATIC% ^
            --with-openssl-opt="%NGINX_CONFIGURE_OPENSSL_OPT%"
          powershell -Command "(Get-Content objs/Makefile) -replace '-Yungx_config.h -Fpobjs/ngx_config.pch', '' | Set-Content objs/Makefile"
          nmake -f objs/Makefile
          systeminfo > build_systeminfo.txt
 
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nginx-windows-msvc-${{ env.BUILD_VERSION_TIMESTAMP }}
          overwrite: true
          compression-level: 9
          path: |
            # objs/*.7z
            # *.7z
            objs/*
            objs/logs/
            objs/temp/
            !objs/contrib/**/*
            !objs/lib/**/*
            !objs/src/**/*
            !objs/**/Makefile
            !objs/**/*.8
            !objs/**/*.err
            !objs/**/*.c
            !objs/**/*.h
            !objs/**/*.o
            !objs/**/*.obj
            !objs/**/*.pdb
            !objs/**/*.lib
            !objs/**/*.exp
            !objs/**/*.ilk 
            !objs/**/*.res 
            !objs/**/*.pch 
    
  publish_release:
    name: Publish release
    #if: ${{ !cancelled() && ( github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' ) }}
    needs: [build-in-ubuntu, build-in-centos6, build-in-centos7, build-in-rocky8, build-in-rocky9, build-in-windows] 
    runs-on: ubuntu-latest
    steps:
      # - name: Free Disk-Space
      #   run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: nginx-*
          merge-multiple: false
          path: artifacts
      - name: Update Latest
        run: |
          set -xe
          shopt -s nullglob
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          # repack zip for dir
          cdir="$(pwd)"
          for dir in artifacts/*/; do
            the_dir=`basename "${cdir}/${dir}"`
            if [[ -d "${cdir}/artifacts/${the_dir}" ]]; then
              echo "Directory exists ${the_dir}."
              cd "${cdir}/artifacts/${the_dir}"
              zip -r -q -9 "${cdir}/artifacts/${the_dir}.zip" .
              cd ..
              rm -rf "${the_dir}"
            fi         
          done
          export buildPrefix="${{ github.event.inputs.buildPrefix }}"
          if [ "${{ github.event.inputs.buildPrefix }}" == "" ]; then buildPrefix="/opt/nginx"; fi
          export openssl3_ver="${{ github.event.inputs.openssl3Ver }}"
          if [ "${{ github.event.inputs.openssl3Ver }}" == "" ]; then openssl3_ver="${{ env.openssl3_ver }}"; fi
          export pcre2_ver="${{ github.event.inputs.pcre2_ver }}"
          if [ "${{ github.event.inputs.pcre2_ver }}" == "" ]; then pcre2_ver="${{ env.pcre2_ver }}"; fi
          export  zlib_ver="${{ github.event.inputs.zlib_ver }}"
          if [ "${{ github.event.inputs.zlib_ver }}" == "" ]; then zlib_ver="${{ env.zlib_ver }}"; fi
          (cd ${cdir}/artifacts && sha256sum *.{zip,tar.xz,7z} > checksums.sha256)
          curl -sLO https://github.com/nginx/nginx/raw/refs/heads/master/src/core/nginx.h
          export version=$(grep -oP '#define NGINX_VERSION\s+"\K[\d.]+' nginx.h | head -1)
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          rm -f nginx.h
          NAME="${version}_${build_timestamp}"
          TAGNAME="${NAME}"
          # TAGNAME="last"
          checksums=$(cat ${cdir}/artifacts/checksums.sha256)
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          # sleep 15
          NOTES="$(printf "|prefix|$buildPrefix|\n| Zlib| $zlib_ver|\n| Pcre2| $pcre2_ver|\n## OpenSSL: $openssl3_ver\n## SHA256 Digest\n \`\`\`\n$checksums\n\`\`\`")"
          gh release create "$TAGNAME" --target "main" --notes "${NOTES}" --title "$NAME" ${cdir}/artifacts/*
        env:
          GITHUB_TOKEN: ${{ github.token }}
